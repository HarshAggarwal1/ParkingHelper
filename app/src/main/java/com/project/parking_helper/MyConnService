package com.project.parking_helper;

import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.telecom.CallAudioState;
import android.telecom.Connection;
import android.telecom.ConnectionRequest;
import android.telecom.PhoneAccountHandle;
import android.telecom.TelecomManager;
import android.util.Log;
import android.Manifest;

import androidx.core.app.ActivityCompat;

public class MyConnectionService extends android.telecom.ConnectionService {
    private static final String TAG = "MyConnectionService";
    private static final String TEST_NUMBER = "9312350851";

    @Override
    public Connection onCreateOutgoingConnection(PhoneAccountHandle connectionManagerPhoneAccount, final ConnectionRequest request) {
        Log.d(TAG, "onCreateOutgoingConnection: ");
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.MANAGE_OWN_CALLS) != PackageManager.PERMISSION_GRANTED) {
            Log.d(TAG, "onCreateOutgoingConnection: Permission not granted");
            return null;
        }
        Uri number = Uri.fromParts("tel", TEST_NUMBER, null);
        MyConnection connection = new MyConnection(number);
        Uri dummyAddress = Uri.fromParts("tel", "0000-000000", null);
        connection.setAddress(dummyAddress, TelecomManager.PRESENTATION_ALLOWED);
        connection.setCallerDisplayName("Test", TelecomManager.PRESENTATION_ALLOWED);
        return connection;

    }

    public static class MyConnection extends Connection {
        private final Uri number;

        public MyConnection(Uri number) {
            this.number = number;
        }

        @Override
        public void onShowIncomingCallUi() {
            super.onShowIncomingCallUi();
            Log.d(TAG, "onShowIncomingCallUi: ");
        }

        @Override
        public void onAnswer() {
            super.onAnswer();
            Log.d(TAG, "onAnswer: ");
        }

        @Override
        public void onReject() {
            super.onReject();
            Log.d(TAG, "onReject: ");
        }

        @Override
        public void onAbort() {
            super.onAbort();
            Log.d(TAG, "onAbort: ");
        }

        @Override
        public void onDisconnect() {
            super.onDisconnect();
            Log.d(TAG, "onDisconnect: ");
        }

        @Override
        public void onHold() {
            super.onHold();
            Log.d(TAG, "onHold: ");
        }

        @Override
        public void onUnhold() {
            super.onUnhold();
            Log.d(TAG, "onUnhold: ");
        }

        @Override
        public void onStateChanged(int state) {
            super.onStateChanged(state);
            Log.d(TAG, "onStateChanged: " + stateToString(state));
        }

        @Override
        public void onCallAudioStateChanged(CallAudioState state) {
            super.onCallAudioStateChanged(state);
            Log.d(TAG, "onCallAudioStateChanged: " + state.toString());
        }

        @Override
        public void onPlayDtmfTone(char c) {
            super.onPlayDtmfTone(c);
            Log.d(TAG, "onPlayDtmfTone: " + c);
        }

        @Override
        public void onStopDtmfTone() {
            super.onStopDtmfTone();
            Log.d(TAG, "onStopDtmfTone: ");
        }

        @Override
        public void onCallEvent(String event, Bundle extras) {
            super.onCallEvent(event, extras);
            Log.d(TAG, "onCallEvent: " + event);
        }

        @Override
        public String toString() {
            return "MyConnection{" +
                    "number=" + number +
                    '}';
        }

        @Override
        public void onExtrasChanged(Bundle extras) {
            super.onExtrasChanged(extras);
            Log.d(TAG, "onExtrasChanged: ");
        }

        @Override
        public void onPostDialContinue(boolean proceed) {
            super.onPostDialContinue(proceed);
            Log.d(TAG, "onPostDialContinue: ");
        }

        @Override
        public void onPullExternalCall() {
            super.onPullExternalCall();
            Log.d(TAG, "onPullExternalCall: ");
        }

        @Override
        public void onSeparate() {
            super.onSeparate();
            Log.d(TAG, "onSeparate: ");
        }
    }
}
